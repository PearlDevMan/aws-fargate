// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jpignata/fargate/acm (interfaces: ACMClient)

// Package mock_acm is a generated GoMock package.
package client

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockACMClient is a mock of ACMClient interface
type MockACMClient struct {
	ctrl     *gomock.Controller
	recorder *MockACMClientMockRecorder
}

// MockACMClientMockRecorder is the mock recorder for MockACMClient
type MockACMClientMockRecorder struct {
	mock *MockACMClient
}

// NewMockACMClient creates a new mock instance
func NewMockACMClient(ctrl *gomock.Controller) *MockACMClient {
	mock := &MockACMClient{ctrl: ctrl}
	mock.recorder = &MockACMClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockACMClient) EXPECT() *MockACMClientMockRecorder {
	return m.recorder
}

// RequestCertificate mocks base method
func (m *MockACMClient) RequestCertificate(arg0 string, arg1 []string) (string, error) {
	ret := m.ctrl.Call(m, "RequestCertificate", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestCertificate indicates an expected call of RequestCertificate
func (mr *MockACMClientMockRecorder) RequestCertificate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestCertificate", reflect.TypeOf((*MockACMClient)(nil).RequestCertificate), arg0, arg1)
}
